{"ast":null,"code":"var _jsxFileName = \"/Users/jasonzhao/Desktop/Jungle-Diff/jungle-diff-frontend/src/PlayerStats.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register the components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst PlayerStats = () => {\n  _s();\n  const [playerStats, setPlayerStats] = useState([]);\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const fetchPlayerStats = async () => {\n      try {\n        const response = await axios.get('http://127.0.0.1:5000/player-stats');\n        console.log('Response data:', response.data);\n        if (Array.isArray(response.data)) {\n          setPlayerStats(response.data);\n          generateChartData(response.data);\n        } else {\n          console.error('Expected an array but got:', response.data);\n        }\n      } catch (error) {\n        console.error('Error fetching player stats:', error);\n      }\n    };\n    fetchPlayerStats();\n  }, []);\n  const generateChartData = data => {\n    const chartLabels = [];\n    const winPercentages = [];\n    const durations = [];\n    data.forEach(item => {\n      chartLabels.push(item.match_id.toString());\n      winPercentages.push(calculateWinPercentage(item));\n      durations.push(item.Duration);\n    });\n    setChartData({\n      labels: chartLabels,\n      datasets: [{\n        label: 'Win Percentage',\n        data: winPercentages,\n        backgroundColor: 'rgba(75,192,192,0.6)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderWidth: 1,\n        yAxisID: 'y-axis-1'\n      }, {\n        label: 'Duration',\n        data: durations,\n        type: 'line',\n        fill: false,\n        borderColor: 'rgba(255,99,132,1)',\n        borderWidth: 2,\n        yAxisID: 'y-axis-2'\n      }]\n    });\n  };\n  const calculateWinPercentage = item => {\n    const totalGames = playerStats.length;\n    const winCount = playerStats.filter(stat => stat.Win).length;\n    return winCount / totalGames * 100;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: chartData && chartData.labels && chartData.labels.length > 0 ? /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            }\n          },\n          scales: {\n            'y-axis-1': {\n              type: 'linear',\n              // Make sure to use 'linear' here\n              display: true,\n              position: 'left',\n              title: {\n                display: true,\n                text: 'Win Percentage'\n              }\n            },\n            'y-axis-2': {\n              type: 'linear',\n              // Make sure to use 'linear' here\n              display: true,\n              position: 'right',\n              title: {\n                display: true,\n                text: 'Duration'\n              }\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading chart...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayerStats, \"No9kYphc6qxKbeWsY4HhBsEFJu8=\");\n_c = PlayerStats;\nexport default PlayerStats;\nvar _c;\n$RefreshReg$(_c, \"PlayerStats\");","map":{"version":3,"names":["React","useState","useEffect","axios","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","PlayerStats","_s","playerStats","setPlayerStats","chartData","setChartData","fetchPlayerStats","response","get","console","log","data","Array","isArray","generateChartData","error","chartLabels","winPercentages","durations","forEach","item","push","match_id","toString","calculateWinPercentage","Duration","labels","datasets","label","backgroundColor","borderColor","borderWidth","yAxisID","type","fill","totalGames","length","winCount","filter","stat","Win","children","options","responsive","plugins","legend","position","scales","display","title","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jasonzhao/Desktop/Jungle-Diff/jungle-diff-frontend/src/PlayerStats.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\n// Register the components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst PlayerStats = () => {\n  const [playerStats, setPlayerStats] = useState([]);\n  const [chartData, setChartData] = useState({});\n\n  useEffect(() => {\n    const fetchPlayerStats = async () => {\n      try {\n        const response = await axios.get('http://127.0.0.1:5000/player-stats');\n        console.log('Response data:', response.data);\n        if (Array.isArray(response.data)) {\n          setPlayerStats(response.data);\n          generateChartData(response.data);\n        } else {\n          console.error('Expected an array but got:', response.data);\n        }\n      } catch (error) {\n        console.error('Error fetching player stats:', error);\n      }\n    };\n\n    fetchPlayerStats();\n  }, []);\n\n  const generateChartData = (data) => {\n    const chartLabels = [];\n    const winPercentages = [];\n    const durations = [];\n\n    data.forEach((item) => {\n      chartLabels.push(item.match_id.toString());\n      winPercentages.push(calculateWinPercentage(item));\n      durations.push(item.Duration);\n    });\n\n    setChartData({\n      labels: chartLabels,\n      datasets: [\n        {\n          label: 'Win Percentage',\n          data: winPercentages,\n          backgroundColor: 'rgba(75,192,192,0.6)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderWidth: 1,\n          yAxisID: 'y-axis-1',\n        },\n        {\n          label: 'Duration',\n          data: durations,\n          type: 'line',\n          fill: false,\n          borderColor: 'rgba(255,99,132,1)',\n          borderWidth: 2,\n          yAxisID: 'y-axis-2',\n        },\n      ],\n    });\n  };\n\n  const calculateWinPercentage = (item) => {\n    const totalGames = playerStats.length;\n    const winCount = playerStats.filter((stat) => stat.Win).length;\n    return (winCount / totalGames) * 100;\n  };\n\n  return (\n    <div>\n      <div>\n        {chartData && chartData.labels && chartData.labels.length > 0 ? (\n          <Bar\n            data={chartData}\n            options={{\n              responsive: true,\n              plugins: {\n                legend: {\n                  position: 'top',\n                },\n              },\n              scales: {\n                'y-axis-1': {\n                  type: 'linear',  // Make sure to use 'linear' here\n                  display: true,\n                  position: 'left',\n                  title: {\n                    display: true,\n                    text: 'Win Percentage',\n                  },\n                },\n                'y-axis-2': {\n                  type: 'linear',  // Make sure to use 'linear' here\n                  display: true,\n                  position: 'right',\n                  title: {\n                    display: true,\n                    text: 'Duration',\n                  },\n                },\n              },\n            }}\n          />\n        ) : (\n          <p>Loading chart...</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerStats;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}