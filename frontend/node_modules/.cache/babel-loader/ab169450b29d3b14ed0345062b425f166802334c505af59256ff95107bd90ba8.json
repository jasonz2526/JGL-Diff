{"ast":null,"code":"var _jsxFileName = \"/Users/jasonzhao/Desktop/Jungle-Diff/jungle-diff-frontend/src/PlayerStats.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Scatter } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register the components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, Title, Tooltip, Legend);\nconst PlayerStats = () => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const fetchPlayerStats = async () => {\n      try {\n        const response = await axios.get('http://127.0.0.1:5000/player-stats');\n        console.log('Response data:', response.data);\n        if (Array.isArray(response.data)) {\n          generateChartData(response.data);\n        } else {\n          console.error('Expected an array but got:', response.data);\n        }\n      } catch (error) {\n        console.error('Error fetching player stats:', error);\n      }\n    };\n    fetchPlayerStats();\n  }, []);\n  const generateChartData = data => {\n    const chartPoints = data.map(item => ({\n      x: item.Duration,\n      y: item.win_rate,\n      r: item.radius\n    }));\n    setChartData({\n      datasets: [{\n        label: 'Win Percentage vs. Duration',\n        data: chartPoints,\n        backgroundColor: 'rgba(75,192,192,0.6)',\n        borderColor: 'rgba(75,192,192,1)'\n      }]\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: chartData && chartData.datasets && chartData.datasets.length > 0 ? /*#__PURE__*/_jsxDEV(Scatter, {\n        data: chartData,\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  return `Duration: ${context.raw.x} mins, Win Rate: ${context.raw.y.toFixed(2)}%, Matches: ${Math.round(context.raw.r / 2) ** 2}`;\n                }\n              }\n            }\n          },\n          scales: {\n            x: {\n              type: 'linear',\n              position: 'bottom',\n              title: {\n                display: true,\n                text: 'Duration (minutes)'\n              },\n              min: 0,\n              max: 40\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Win Percentage (%)'\n              },\n              min: 0,\n              max: 100\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading chart...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayerStats, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = PlayerStats;\nexport default PlayerStats;\nvar _c;\n$RefreshReg$(_c, \"PlayerStats\");","map":{"version":3,"names":["React","useState","useEffect","axios","Scatter","Chart","ChartJS","CategoryScale","LinearScale","PointElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","PlayerStats","_s","chartData","setChartData","fetchPlayerStats","response","get","console","log","data","Array","isArray","generateChartData","error","chartPoints","map","item","x","Duration","y","win_rate","r","radius","datasets","label","backgroundColor","borderColor","children","length","options","responsive","plugins","legend","position","tooltip","callbacks","context","raw","toFixed","Math","round","scales","type","title","display","text","min","max","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jasonzhao/Desktop/Jungle-Diff/jungle-diff-frontend/src/PlayerStats.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Scatter } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\n// Register the components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst PlayerStats = () => {\n  const [chartData, setChartData] = useState({});\n\n  useEffect(() => {\n    const fetchPlayerStats = async () => {\n      try {\n        const response = await axios.get('http://127.0.0.1:5000/player-stats');\n        console.log('Response data:', response.data);\n        if (Array.isArray(response.data)) {\n          generateChartData(response.data);\n        } else {\n          console.error('Expected an array but got:', response.data);\n        }\n      } catch (error) {\n        console.error('Error fetching player stats:', error);\n      }\n    };\n\n    fetchPlayerStats();\n  }, []);\n\n  const generateChartData = (data) => {\n    const chartPoints = data.map((item) => ({\n      x: item.Duration,\n      y: item.win_rate,\n      r: item.radius,\n    }));\n\n    setChartData({\n      datasets: [\n        {\n          label: 'Win Percentage vs. Duration',\n          data: chartPoints,\n          backgroundColor: 'rgba(75,192,192,0.6)',\n          borderColor: 'rgba(75,192,192,1)',\n        },\n      ],\n    });\n  };\n\n  return (\n    <div>\n      <div>\n        {chartData && chartData.datasets && chartData.datasets.length > 0 ? (\n          <Scatter\n            data={chartData}\n            options={{\n              responsive: true,\n              plugins: {\n                legend: {\n                  position: 'top',\n                },\n                tooltip: {\n                  callbacks: {\n                    label: function (context) {\n                      return `Duration: ${context.raw.x} mins, Win Rate: ${context.raw.y.toFixed(\n                        2\n                      )}%, Matches: ${Math.round(context.raw.r / 2) ** 2}`;\n                    },\n                  },\n                },\n              },\n              scales: {\n                x: {\n                  type: 'linear',\n                  position: 'bottom',\n                  title: {\n                    display: true,\n                    text: 'Duration (minutes)',\n                  },\n                  min: 0,\n                  max: 40,\n                },\n                y: {\n                  title: {\n                    display: true,\n                    text: 'Win Percentage (%)',\n                  },\n                  min: 0,\n                  max: 100,\n                },\n              },\n            }}\n          />\n        ) : (\n          <p>Loading chart...</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerStats;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}